// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/system.proto

package system

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for System service

func NewSystemEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for System service

type SystemService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (System_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (System_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (System_BidiStreamService, error)
}

type systemService struct {
	c    client.Client
	name string
}

func NewSystemService(name string, c client.Client) SystemService {
	return &systemService{
		c:    c,
		name: name,
	}
}

func (c *systemService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "System.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemService) ClientStream(ctx context.Context, opts ...client.CallOption) (System_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "System.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &systemServiceClientStream{stream}, nil
}

type System_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ClientStreamRequest) error
}

type systemServiceClientStream struct {
	stream client.Stream
}

func (x *systemServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *systemServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *systemServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *systemServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *systemServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *systemService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (System_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "System.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &systemServiceServerStream{stream}, nil
}

type System_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type systemServiceServerStream struct {
	stream client.Stream
}

func (x *systemServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *systemServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *systemServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *systemServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *systemServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *systemService) BidiStream(ctx context.Context, opts ...client.CallOption) (System_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "System.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &systemServiceBidiStream{stream}, nil
}

type System_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type systemServiceBidiStream struct {
	stream client.Stream
}

func (x *systemServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *systemServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *systemServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *systemServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *systemServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *systemServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for System service

type SystemHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, System_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, System_ServerStreamStream) error
	BidiStream(context.Context, System_BidiStreamStream) error
}

func RegisterSystemHandler(s server.Server, hdlr SystemHandler, opts ...server.HandlerOption) error {
	type system interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type System struct {
		system
	}
	h := &systemHandler{hdlr}
	return s.Handle(s.NewHandler(&System{h}, opts...))
}

type systemHandler struct {
	SystemHandler
}

func (h *systemHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.SystemHandler.Call(ctx, in, out)
}

func (h *systemHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.SystemHandler.ClientStream(ctx, &systemClientStreamStream{stream})
}

type System_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type systemClientStreamStream struct {
	stream server.Stream
}

func (x *systemClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *systemClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *systemClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *systemClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *systemClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *systemHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.SystemHandler.ServerStream(ctx, m, &systemServerStreamStream{stream})
}

type System_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type systemServerStreamStream struct {
	stream server.Stream
}

func (x *systemServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *systemServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *systemServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *systemServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *systemServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *systemHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.SystemHandler.BidiStream(ctx, &systemBidiStreamStream{stream})
}

type System_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type systemBidiStreamStream struct {
	stream server.Stream
}

func (x *systemBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *systemBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *systemBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *systemBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *systemBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *systemBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
